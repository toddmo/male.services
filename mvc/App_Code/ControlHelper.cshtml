@using System.Globalization;
@using System.Reflection;
@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using male.services.biz
@using male.services.mvc
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;

@functions
{
  public static HelperResult Grid<TModel>(HtmlHelper<TModel> html,
    List<NavigationEntry> navigationEntries,
    string controller = null
    )
  {
    return RenderGrid(html, controller ?? ControllerName, navigationEntries);
  }

  public static string ControllerName
  {
    get
    {
      return HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();
    }
  }
}

@helper RenderPackage(System.Web.Mvc.HtmlHelper html, Package package)
{
  <style>
    .grid1 {
      position: relative;
      -webkit-box-shadow: 0 1px 0px #E6E5E5;
      width: 250px;
      border: 1px solid grey;
      border-radius: 3px;
      display: inline-block;
      margin: 0px 3px 3px 0px;
    }

    .view {
      overflow: hidden;
      position: relative;
      text-align: center;
      cursor: default;
      border-top-left-radius: 3px;
      -webkit-border-top-left-radius: 3px;
      -moz-border-top-left-radius: 3px;
      -o-border-top-left-radius: 3px;
      border-top-right-radius: 3px;
      -webkit-border-top-right-radius: 3px;
      -moz-border-top-right-radius: 3px;
      -o-border-top-right-radius: 3px;
    }

    .view-first img {
      -webkit-transition: all 0.2s linear;
      -moz-transition: all 0.2s linear;
      -o-transition: all 0.2s linear;
      -ms-transition: all 0.2s linear;
      transition: all 0.2s linear;
    }

    .view img {
      display: block;
      position: relative;
    }

    .index_img img {
      border-bottom: 3px solid rebeccapurple;
      border-radius: 3px 3px 0px 0px;
    }

    .img-responsive, .thumbnail > img, .thumbnail a > img, .carousel-inner > .item > img, .carousel-inner > .item > a > img {
      display: block;
      max-width: 100%;
      height: auto;
    }

    img {
      vertical-align: middle;
    }

    img {
      border: 0;
    }

    .sale {
      font-size: 14px;
      font-weight: 500;
      color: #fff;
      background-color: purple;
      line-height: 23px;
      padding: 3px 14px;
      position: absolute;
      top: 7px;
      right: 20px;
      text-transform: uppercase;
      border-radius: 100px;
      -webkit-border-radius: 100px;
      -moz-border-radius: 100px;
      -o-border-radius: 100px;
    }

    .view-first .mask {
      -ms-filter: "progid: DXImageTransform.Microsoft.Alpha(Opacity=0)";
      filter: alpha(opacity=0);
      opacity: 0;
      background-color: rgba(64, 19, 1, 0.83);
      -webkit-transition: all 0.4s ease-in-out;
      -moz-transition: all 0.4s ease-in-out;
      -o-transition: all 0.4s ease-in-out;
      -ms-transition: all 0.4s ease-in-out;
      transition: all 0.4s ease-in-out;
      border-bottom: 3px solid #F19E1F;
    }

    .view .mask, .view .content {
      position: absolute;
      overflow: hidden;
      top: 0;
      left: 0;
      cursor: pointer;
      width: 258px;
      height: 173px;
    }

    i.home {
      position: absolute;
      left: 0;
      right: 0;
      bottom: 116px;
      width: 64px;
      height: 64px;
      margin: auto;
      border-radius: 100%;
      background: url(../../images/gym-near.png) 0 no-repeat #47a447;
    }

    .inner_wrap, .inner_wrap2 {
      background-color: #f6f6f6;
      padding: 2em 1em 1em;
      text-align: center;
      border-bottom-left-radius: 3px;
      -webkit-border-bottom-left-radius: 3px;
      -moz-border-bottom-left-radius: 3px;
      -o-border-bottom-left-radius: 3px;
      border-bottom-right-radius: 3px;
      -webkit-border-bottom-right-radius: 3px;
      -moz-border-bottom-right-radius: 3px;
      -o-border-bottom-right-radius: 3px;
    }

      .inner_wrap h3, .inner_wrap2 h3 {
        color: #566375;
        font-size: 0.85em;
        font-weight: 100;
        line-height: 1.3em;
        margin-bottom: 1em;
      }


    ul.star1 {
      padding: 0;
      list-style: none;
    }


    h4.green, h4.yellow, h4.blue {
      color: #331408;
      text-transform: uppercase;
      font-size: 0.8125em;
      margin-bottom: 8px;
    }
  </style>
  <div class="grid1">
    <div class="view view-first">
      <div class="index_img"><img src="~/images/kendra-gym.jpeg" class="img-responsive" alt=""></div>
      <div class="sale">@package.Price.ToString("C")</div>
      <div class="mask">
        <div class="info"><i class="search"> </i> Show More</div>
        <ul class="mask_img">
          <li class="star"><img src="~/images/star2.png" alt=""></li>
          <li class="set"><img src="~/images/set.png" alt=""></li>
          <div class="clearfix"> </div>
        </ul>
      </div>
    </div>
    <i class="home"></i>
    <div class="inner_wrap">
      <h3>@package.Description</h3>
      <ul class="star1">
        <h4 class="green">@package.Name</h4>
        @ControlHelper.RenderPayPalButton(html, package)
      </ul>
    </div>
  </div>
}

@helper RenderPayPalButton(System.Web.Mvc.HtmlHelper html, Package package)
{
  <form id="frmPayPal@(package.Id)" name="frmPayPal@(package.Id)" action="https://www.sandbox.paypal.com/cgi-bin/webscr" method="post" target="_top">
    <input type="hidden" name="cmd" value="_xclick">
    <input type="hidden" name="business" value="HS9V377AM8QWW">
    <input type="hidden" name="lc" value="US">
    <input type="hidden" name="item_name" value="@package.Name">
    <input type="hidden" name="item_number" value="@package.Id">
    <input type="hidden" name="amount" value="@package.Price">
    <input type="hidden" name="currency_code" value="USD">
    <input type="hidden" name="button_subtype" value="services">
    <input type="hidden" name="no_note" value="0">
    <input type="hidden" name="cn" value="Add special instructions to the seller:">
    <input type="hidden" name="no_shipping" value="1">
    <input type="hidden" name="undefined_quantity" value="0">
    <input type="hidden" name="rm" value="1">
    @*<input type="hidden" name="return" value="http://633efe45.ngrok.io/home/purchaseconfirmation">*@
    <input type="hidden" name="return" value="http://localhost:54221/packages/purchase/@(package.Id)">
    <input type="hidden" name="cancel_return" value="http://localhost:54221/home/packagelist">
    <input type="hidden" name="bn" value="PP-BuyNowBF:btn_buynowCC_LG.gif:NonHosted">
    @*<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">*@
    <button name="submit"
            type="submit"
            form="frmPayPal@(package.Id)"
            class="btn btn-sm btn-success"
            title="PayPal - The safer, easier way to pay online!">
      <span class="glyphicon glyphicon-" aria-hidden="true"></span>Buy
    </button>
    <img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
  </form>

}

@helper RenderCalendarMonthView(System.Web.Mvc.HtmlHelper html, string controller)
{
using (html.BeginForm("SubmitCalendar", controller, FormMethod.Post, new { name = "frmCalendar", id = "frmCalendar" }))
{
  DateTime currentDate = DateTime.Now;
  DateTime startDate = currentDate.FirstDayOfMonth().FirstDayOfWeekBefore(DayOfWeek.Sunday);
  DateTime endDate = currentDate.LastDayOfMonth().FirstDayOfWeekAfter(DayOfWeek.Saturday);
  List<Fulfillment> fulfillments = new List<Fulfillment>()
    {
      new Fulfillment()
      {
         Date = Convert.ToDateTime("06/02/2016 16:30:00")
      },
      new Fulfillment()
      {
         Date = Convert.ToDateTime("06/2/2016 17:30:00")
      },
      new Fulfillment()
      {
         Date = Convert.ToDateTime("06/12/2016 10:00:00")
      }
    };

    <style>
      .fakelink {
        border: 0px;
        background-color: transparent;
        -webkit-transition-duration: 0.4s;
        transition-duration: 0.4s;
        cursor: pointer;
      }

        .fakelink:hover {
          text-decoration: underline;
        }

      .calendar caption {
        position: relative;
        border: 1px solid #ddd;
        margin: 0px;
        border-bottom: 0px;
        padding: 6px 0px;
        font-weight: bold;
        /*color: #555;*/
      }

      .calendar .month-arrow {
        position: absolute;
        /*color: dimgray;*/
        margin: auto;
        top: 0;
        bottom: 0;
      }

        .calendar .month-arrow.previous {
          left: 3px;
        }

        .calendar .month-arrow.next {
          right: 3px;
        }

      .calendar th {
        text-align: center;
      }

      .calendar td {
        position: relative;
        width: 14%;
        height: 75px;
        padding-top: 17px !important;
        text-align: right;
      }

        .calendar td.past {
          background-color: #fafafa;
        }

        .calendar td .month-marker {
          position: absolute;
          top: 0px;
          left: 4px;
          color: gray;
        }

        .calendar td .day-marker {
          position: absolute;
          top: 0px;
          right: 3px;
        }

          .calendar td .day-marker.today {
            font-weight: bold;
            color: green;
          }

          .calendar td .day-marker.inactive {
            color: gray;
          }

        .calendar td .event {
          position: relative;
          margin-top: 3px;
          padding: 3px;
          border: 1px solid lightgray;
          border-radius: 2px;
          font-size: 12px;
          line-height: normal;
          text-align: center;
          background-image: linear-gradient(hsl(0, 0%, 121%), hsl(0, 0%, 79%));
        }

          .calendar td .event .event-time {
            position: absolute;
            top: 3px;
            left: 3px;
          }

          .calendar td .event .event-desc {
            position: absolute;
            top: 3px;
            right: 3px;
          }
    </style>

  // BEGIN THE TABLE
  <table class="calendar table table-bordered table-condensed">
    @*table-striped table-hover *@
    <caption>
      <h4>
        <button name="command"
                type="submit"
                form="frmCalendar"
                class="fakelink month-arrow previous"
                value="MonthView:@currentDate.AddMonths(-1)"
                title="@currentDate.AddMonths(-1).ToString("MMMM",CultureInfo.InvariantCulture)">
          <span class="glyphicon glyphicon-chevron-up" aria-hidden="true"></span>
        </button>
        @currentDate.ToString("MMMM", CultureInfo.InvariantCulture)
        <button name="command"
                type="submit"
                form="frmCalendar"
                class="fakelink month-arrow next"
                value="MonthView:@currentDate.AddMonths(1)"
                title="@currentDate.AddMonths(1).ToString("MMMM",CultureInfo.InvariantCulture)">
          <span class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span>
        </button>
      </h4>
    </caption>
    <thead>
      <tr>
        <th>Sunday</th>
        <th>Monday</th>
        <th>Tuesday</th>
        <th>Wednesday</th>
        <th>Thursday</th>
        <th>Friday</th>
        <th>Saturday</th>
      </tr>
    </thead>
    <tbody>
      @{
        DateTime drawDate = startDate;
      }
      @while (drawDate <= endDate)
      {
        <tr>
          @for (int dayIndex = 1; dayIndex <= 7; dayIndex++)
          {
            <td @{if (drawDate.Date < currentDate.Date) { <text> class="past" </text>            } }>
              @if (drawDate.Day == 1)
              {
                <span class="month-marker">@drawDate.ToString("MMMM", CultureInfo.InvariantCulture)</span>
              }
              @if (drawDate.Date >= currentDate.Date)
              {
                <button name="command"
                        type="submit"
                        form="frmCalendar"
                        class="day-marker fakelink @{if (drawDate.Date == currentDate.Date) { <text> today</text>}  else if (drawDate.Month != currentDate.Month) { <text> inactive</text> } }"
                        value="DayView:@drawDate.Date.ToShortDateString()">
                  <span aria-hidden="true"></span>@drawDate.Day
                </button>
  }
  else
  {
    <span class="day-marker">@drawDate.Day</span>
  }
              @foreach (var f in fulfillments.Where(f => f.Date.Date.Equals(drawDate.Date)))
              {
                <div class="event">
                  &nbsp;
                  <span class="event-time">@f.Date.ToString("h:mm tt", CultureInfo.InvariantCulture)</span>
                  <span class="event-desc">Todd</span>
                </div>
              }
            </td>
    drawDate = drawDate.AddDays(1);
  }
        </tr>
  }
    </tbody>
  </table>
  }
}

@helper RenderCalendarDayView(System.Web.Mvc.HtmlHelper html, string controller)
{
  <style>
    .calendar {
      /*position:relative;*/
    }

      .calendar .hour {
        position: absolute;
        top: 3px;
        right: 3px;
        font-size: x-small;
      }
  </style>

using (html.BeginForm("SubmitCalendar", controller, FormMethod.Post, new { name = "frmCalendar", id = "frmCalendar" }))
{
    <div class="pre-scrollable">
      @*BEGIN THE TABLE*@
      <table class="calendar table table-bordered table-hover table-condensed">
        <caption></caption>
        <thead></thead>
        <tbody>
          @for (int hour = 0; hour <= 23; hour++)

          {
            var time = new DateTime(1, 1, 1, hour, 0, 0);
            <tr>
              <td class="col-md-1" rowspan="2">
                <div style="position:relative; overflow: auto; height: 100%;">
                  <span class="hour">@time.ToShortTimeString()</span>
                </div>
              </td>
              <td class="col-md-11">
                <button name="command"
                        type="submit"
                        form="frmCalendar"
                        class="btn btn-success btn-xs"
                        value="Book:@time">
                  <span class="glyphicon glyphicon-plus-sign" title="Schedule Appointment" aria-hidden="true"></span>&nbsp;Book appointment for @time.ToShortTimeString()
                </button>
              </td>
            </tr>
            <tr>
              <td class="col-md-11">
                <button name="command"
                        type="submit"
                        form="frmCalendar"
                        class="btn btn-success btn-xs"
                        value="Book:@time.AddMinutes(30)">
                  <span class="glyphicon glyphicon-plus-sign" title="Schedule Appointment" aria-hidden="true"></span>&nbsp;Book appointment for @time.AddMinutes(30).ToShortTimeString()
                </button>
              </td>
            </tr>
          }
        </tbody>
      </table>
    </div>

}
}

@helper RenderBreadCrumbs(System.Web.Mvc.HtmlHelper html, List<NavigationEntry> navigationEntries, string controller = null)
    {
  <style type="text/css">
    .fakelink {
      border: 0px;
      background-color: transparent;
      -webkit-transition-duration: 0.4s; /* Safari */
      transition-duration: 0.4s;
      cursor: pointer;
    }

      .fakelink:hover {
        text-decoration: underline;
      }
  </style>
using (html.BeginForm("SubmitBreadCrumbs", controller ?? ControllerName, FormMethod.Post, new { name = "frmBreadCrumbs", id = "frmBreadCrumbs" }))
{
  var index = 0;
  var breadCrumbs = navigationEntries.Skip(1).Reverse();
  foreach (NavigationEntry navigationEntry in breadCrumbs)
  {
      <input type="hidden" name="navigationEntries[@index].ParentTypeName" value="@navigationEntry.ParentTypeName" />
    var keyIndex = 0;
    foreach (KeyValuePair<string, int> kvp in navigationEntry.ParentKeys)
    {
        <input type="hidden" name="navigationEntries[@index].ParentKeys[@keyIndex].Key" value="@kvp.Key" />
        <input type="hidden" name="navigationEntries[@index].ParentKeys[@keyIndex].Value" value="@kvp.Value" />
      keyIndex++;
    }
      <input type="hidden" name="navigationEntries[@index].CollectionPropertyName" value="@navigationEntry.CollectionPropertyName" />
      <button name="command"
              type="submit"
              form="frmBreadCrumbs"
              class="fakelink"
              value="Ancestor:@index">
        <span aria-hidden="true"></span>@navigationEntry.Label
      </button>
    if (navigationEntry != breadCrumbs.Last())
    {
        <span aria-hidden="true">></span>
    }

    index++;
  }
}
}

@helper RenderGrid(System.Web.Mvc.HtmlHelper html, string controller, List<NavigationEntry> navigationEntries)
    {
var current = navigationEntries.First();
var collection = current.Collection;

var formName = "frm" + current.CollectionPropertyName;

using (html.BeginForm(current.ControllerAction, controller, FormMethod.Post, new { name = formName, id = formName, enctype = "multipart/form-data" }))
{
  var index = 0;
  foreach (var navigationEntry in navigationEntries)
  {
      <input type="hidden" name="navigationEntries[@index].ParentTypeName" value="@navigationEntry.ParentTypeName" />
    var keyIndex = 0;
    foreach (KeyValuePair<string, int> kvp in navigationEntry.ParentKeys)
    {

        <input type="hidden" name="navigationEntries[@index].ParentKeys[@keyIndex].Key" value="@kvp.Key" />
        <input type="hidden" name="navigationEntries[@index].ParentKeys[@keyIndex].Value" value="@kvp.Value" />
      keyIndex++;
    }
      <input type="hidden" name="navigationEntries[@index].CollectionPropertyName" value="@navigationEntry.CollectionPropertyName" />
    index++;
  }

  EFBase parent = current.Parent;

  var keyProperties = from PropertyInfo
        in current.CollectionItemType.GetProperties()
                      where PropertyInfo.GetCustomAttributes(typeof(KeyAttribute), true).Any()
                      orderby PropertyInfo.MetadataToken
                      select PropertyInfo;

  // Add hidden inputs for the parent keys
  if (parent != null)
  {
    IOrderedEnumerable<PropertyInfo> parentKeyProperties = from PropertyInfo
                                                           in parent.GetType().GetProperties()
                                                           where PropertyInfo.GetCustomAttributes(typeof(KeyAttribute), true).Any()
                                                           orderby PropertyInfo.MetadataToken
                                                           select PropertyInfo;
    // Add some hidden inputs for the keys for the new row
    foreach (var p in keyProperties.Where(o => o.Name != "Id"))//Id not needed on new row
    {
      PropertyInfo parentKeyProperty = parentKeyProperties.SingleOrDefault(o => o.Name == p.Name) ??
        parentKeyProperties.SingleOrDefault(o => o.Name == "Id");

        <input type="hidden" name="collection[@(collection.Cast<object>().Count())].@p.Name" value="@parentKeyProperty.GetValue(parent)" />
    }
  }
  index = 0;
  // Add hidden inputs (outside the table) for the each item's keys
  foreach (EFBase item in collection)
  {
    foreach (var p in keyProperties)
    {
      KeyAttribute keyAttribute = (KeyAttribute)p.GetCustomAttributes(typeof(KeyAttribute), false).First();
        <input type="hidden" name="collection[@index].@p.Name" value="@p.GetValue(item)" />
    }
    index++;
  }
  // BEGIN THE TABLE
  <table class="table table-striped table-bordered table-hover table-condensed">
    <caption style="border: 1px solid #ddd;margin: 0px;border-bottom: 0px;padding: 6px 0px;font-weight: bold;color: #555;">
      <h4>
        @(current.CollectionPropertyName + (current.Parent != null ? " for " : ""))
        @if (parent != null)
        {
          <button name="command"
                  type="submit"
                  form="@formName"
                  class="btn btn-success"
                  value="Parent">
            <span class="glyphicon glyphicon-arrow-up" aria-hidden="true"></span>@parent.ToString()
          </button>
        }
      </h4>
    </caption>
    <thead>
      <tr>
        @{
          var visibleProperties = from PropertyInfo
                                  in current.CollectionItemType.GetProperties()
                                  where !PropertyInfo.GetCustomAttributes(typeof(KeyAttribute), true).Any() &&
                                  (PropertyInfo.PropertyType.IsEnum ||
                                  PropertyInfo.PropertyType.Name == "EFCollection`1" ||
                                  PropertyInfo.GetCustomAttributes(typeof(ForeignKeyAttribute), false).Any() ||
                                  PropertyInfo.PropertyType.Namespace != current.CollectionItemType.Namespace)
                                  orderby PropertyInfo.MetadataToken
                                  select PropertyInfo;
        }
        @* TABLE HEADERS *@
        @foreach (var p in visibleProperties)
        {
          <th> @p.Name.StripEnd() </th>
        }
        <th>&nbsp;</th>
        <th>&nbsp;</th>
      </tr>
    </thead>
    @* ITEM ROW *@
    @{
      index = 0;
    }
    @foreach (EFBase item in collection)
    {
      <tr>
        @* PROPERTY CELL *@
        @foreach (var p in visibleProperties)
        {
          <td>
            @if (p.PropertyType.IsEnum)
            {
              <select name="collection[@index].@p.Name" class="form-control" placeholder="@p.Name">
                @foreach (var v in Enum.GetValues(p.PropertyType))
                {
                  <option value="@v" @{if ((int)v == (int)p.GetValue(item)) { <text> selected</text>} }>@v.ToString()</option>
  }
              </select>
  }
  else if (p.PropertyType.Name == "EFCollection`1")
  {
    <button name="command"
            type="submit"
            form="@formName"
            class="btn btn-primary"
            value="Children:@p.Name:@item.Id">
      <span class="glyphicon glyphicon-list" aria-hidden="true"></span>&nbsp;Details
    </button>
  }
  else if (p.Name.EndsWith("_Id"))
  {
    <select name="collection[@index].@p.Name" class="form-control" placeholder="@p.Name">
      <option value="">Select @p.Name.StripEnd()</option>
      @foreach (EFBase fkItem in item.GetForeignKeyList(p))
      {
        <option value="@fkItem.Id" @{if (fkItem.Id == (int)p.GetValue(item)) { <text> selected</text>} }>@fkItem.ToString()</option>
  }
    </select>
          }
          else if (p.PropertyType == typeof(byte[]))
          {
            var value = (byte[])p.GetValue(item);
            string imageData = value != null ? Convert.ToBase64String(value) : "";
            string src = value != null ? $"data:image/gif;base64,{imageData}" : "/images/fun.png";
            <div style="position:relative;height:100px;background:url(data:image/gif;base64,@imageData) no-repeat center center;background-size:contain;">
              <label class="btn btn-primary btn-file">
                Replace <input type="file" 
                              name="collection[@index].@(p.Name)"
                              style="display: none;">
              </label>
            </div>
            @*<input name="collection[@index].@p.Name"
              type="hidden"
              value="@imageData" />*@
          }
          else
          {
    <input type="text"
           name="collection[@index].@p.Name"
           class="form-control"
           value="@p.GetValue(item)"
           placeholder="@p.Name" />
  }
          </td>
  }
        @*The save button*@
        <td>
          <button name="command"
                  type="submit"
                  form="@formName"
                  class="btn btn-success"
                  value="Save:@item.Id">
            <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>
          </button>
        </td>
        @*The delete button*@
        <td>
          <button name="command"
                  type="submit"
                  form="@formName"
                  class="btn btn-danger"
                  value="Delete:@item.Id">
            <span class="glyphicon glyphicon-trash" aria-hidden="true" />
          </button>
        </td>

      </tr>
    index++;
  }

    @* NEW ITEM ROW *@
    <tr>
      @foreach (var p in visibleProperties)
      {
        <td>
          @if (p.PropertyType.IsEnum)
          {
            <select name="collection[@index].@p.Name" class="form-control" placeholder="@p.Name">
              @foreach (var v in System.Enum.GetValues(p.PropertyType))
              {
                <option value="@v">@v.ToString()</option>
              }
            </select>
          }
          else if (p.PropertyType.Name == "EFCollection`1")
          {
            <button name="command"
                    type="submit"
                    form="@formName"
                    class="btn btn-primary"
                    disabled
                    value="">
              <span class="glyphicon glyphicon-list" aria-hidden="true"></span>&nbsp;Details
            </button>
          }
          else if (p.Name.EndsWith("_Id"))
          {
            <select name="collection[@index].@p.Name" class="form-control" placeholder="@p.Name">
              <option selected value="">Select @p.Name.StripEnd()</option>
              @foreach (EFBase fkItem in EFBase.GetForeignKeyList(current.Parent, p))
              {
                <option value="@fkItem.Id">@fkItem.ToString()</option>
              }
            </select>
          }
          else if (p.PropertyType == typeof(byte[]))
          {
            <label class="btn btn-primary btn-file">
              Upload <input type="file"
                             name="collection[@index].@(p.Name)"
                             style="display: none;">
            </label>
          }
          else
          {
            <input type="text"
                   name="collection[@index].@p.Name"
                   class="form-control"
                   placeholder="@p.Name" />
          }
        </td>
      }
      <td>
        <button name="command"
                type="submit"
                form="@formName"
                class="btn btn-primary"
                value="Add">
          <span class="glyphicon glyphicon-asterisk" aria-hidden="true" />
        </button>
      </td>
      <td>&nbsp;</td>
    </tr>
  </table>
  }
}
